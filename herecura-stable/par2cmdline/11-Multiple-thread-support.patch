--- a/par2repairer.h
+++ b/par2repairer.h
@@ -20,6 +20,8 @@
 #ifndef __PAR2REPAIRER_H__
 #define __PAR2REPAIRER_H__
 
+#include <pthread.h>
+
 class Par2Repairer
 {
 public:
@@ -71,9 +73,11 @@ protected:
 
   // Attempt to verify all of the source files
   bool VerifySourceFiles(void);
+  bool VerifySourceFileCollection (const vector<Par2RepairerSourceFile*> &aCollection);	// For multi-thread
 
   // Scan any extra files specified on the command line
   bool VerifyExtraFiles(const list<CommandLine::ExtraFile> &extrafiles);
+  bool VerifyExtraFileCollection (const list<CommandLine::ExtraFile> &extrafiles);	// For multi-thread
 
   // Attempt to match the data in the DiskFile with the source file
   bool VerifyDataFile(DiskFile *diskfile, Par2RepairerSourceFile *sourcefile);
@@ -93,8 +97,8 @@ protected:
   // Find out how much data we have found
   void UpdateVerificationResults(void);
 
-  // Check the verification results and report the results 
-  bool CheckVerificationResults(void);
+  // Check the verification results and report the results on cout when aSilent = 0
+  bool CheckVerificationResults(int aSilent = 0);
 
   // Rename any damaged or missnamed target files.
   bool RenameTargetFiles(void);
@@ -116,10 +120,20 @@ protected:
 
   // Verify that all of the reconstructed target files are now correct
   bool VerifyTargetFiles(void);
+  bool VerifyFilesInVerifyList();	// Multiple threads
 
   // Delete all of the partly reconstructed files
   bool DeleteIncompleteTargetFiles(void);
 
+  // Submethods of ProcessData
+  bool RepairMissingBlocks (size_t blocklength, u32 inputindex);
+  // In the next function, aEndBlockNo is the last block number + 1.
+  void RepairMissingBlockRange (size_t blocklength, u32 inputindex, u32 aStartBlockNo, u32 aEndBlockNo);
+  // Thread start functions
+  static void *RepairMissingBlockRangeFunc (void *aParams);
+  static void *VerifySourceFileCollectionFunc (void *aParams);
+  static void *VerifyFilesInVerifyListFunc (void *aParams);
+  static void *VerifyExtraFileCollectionFunc (void *aParams);
 protected:
   CommandLine::NoiseLevel   noiselevel;              // OnScreen display
 
@@ -171,6 +185,13 @@ protected:
 
   u64                       progress;                // How much data has been processed.
   u64                       totaldata;               // Total amount of data to be processed.
+  int						previouslyReportedProgress;
+  pthread_mutex_t			progressMutex;
+  int						numCPUs;
+  vector<Par2RepairerSourceFile*>::const_iterator sourceFileIterator;	// Used in multiple threads
+  vector<Par2RepairerSourceFile*>::const_iterator targetFileIterator;	// Used in multiple threads
+  ExtraFileIterator			extraFileIterator;
+  pthread_mutex_t			fileIteratorMutex;
 };
 
 #endif // __PAR2REPAIRER_H__
