# Contributors : Ralf Barth <archlinux dot org at haggy dot org>
# Contributor: BlackEagle < ike DOT devolder AT gmail DOT com >
#
# Original credits go to Edgar Hucek <gimli at dark-green dot com>
# for his xbmc-vdpau-vdr PKGBUILD at https://archvdr.svn.sourceforge.net/svnroot/archvdr/trunk/archvdr/xbmc-vdpau-vdr/PKGBUILD

pkgname=xbmc-git
pkgver=20110304
pkgrel=1
pkgdesc="XBMC Media Center Dharma branch"
provides=('xbmc')
conflicts=('xbmc' 'xbmc-pulse' 'xbmc-svn')
replaces=('xbmc-svn')
arch=('i686' 'x86_64')
url="http://xbmc.org"
license=('GPL' 'LGPL')
depends=(libgl libmpeg2 fribidi lzo2 smbclient sdl_image dbus-core libva libxtst sdl_mixer libmicrohttpd libcdio libmms libmysqlclient libsamplerate glew wavpack libssh libass lcms mesa-demos xorg-xdpyinfo libmad libmodplug faac faad2 jasper)
makedepends=('boost' 'cmake' 'gperf' 'nasm' 'yasm' 'unzip' 'zip' 'vdpau-video' 'git' 'libxrandr' 'libxinerama')

optdepends=(
	'lirc: remote controller support' 
	'udisks: automount external drives' 
	'upower: used to trigger suspend functionality' 
	'unrar: access compressed files without unpacking them'
	'vdpau-video: for nvidia hardware accelleration'
)
install=("${pkgname}.install")
source=( "FEH.sh" )
sha256sums=('1b391dfbaa07f81e5a5a7dfd1288bf2bdeab8dc50bbb6dbf39a80d8797dfaeb0')
options=(strip)

if [ -e .githash_${CARCH} ] ; then
	_gitphash=$(cat .githash_${CARCH})
else
	_gitphash=""
fi
_prefix='/usr'
_gitroot='https://github.com/xbmc/xbmc.git'
_gitname='xbmc'
_gitbranch='master'

build() {
	msg2 "Getting XBMC from git"
	if [ -d ${_gitname} ]; then
		pushd ${_gitname} && git pull origin master && popd
	else
		git clone ${_gitroot} ${_gitname}
	fi
	msg2 "Git clone/checkout done or server timeout"

	cd ${srcdir}/${_gitname}
	[ "${_gitphash}" == $(git show | grep -m 1 commit | sed 's/commit //') ] && return 1

	# Configure XBMC
	#
	# Note on external-libs:
	#   - We cannot use external python because Arch's python was built with
	#     UCS2 unicode support, whereas xbmc expects UCS4 support
	#   - According to an xbmc dev using external/system ffmpeg with xbmc is "pure stupid" :D

	# remove builddir if it already exists
	cd ${srcdir}
	[ -d ${_gitname}-build ] && rm -Rf ${_gitname}-build

	# create builddir
	msg2 "create build directory"
	cp -a ${_gitname} ${_gitname}-build

	cd ${_gitname}-build

	# remove "--as-needed" from LDFLAGS
	unset LDFLAGS; LDFLAGS="-Wl,--hash-style=gnu"

	msg2 "Bootstrapping XBMC"
	./bootstrap

	msg2 "Configuring XBMC" 
	./configure --prefix=${_prefix} --exec-prefix=${_prefix} \
		--enable-debug \
		--enable-optimizations \
		--enable-gl \
		--enable-vdpau \
		--enable-vaapi \
		--disable-profiling \
		--enable-joystick \
		--disable-xrandr \
		--disable-pulse \
		--disable-hal \
		--disable-avahi

	# Now (finally) build
	msg2 "Running make" 
	make
	make -C lib/addons/script.module.pil
	make -C lib/addons/script.module.pysqlite
}

package() {
	#cd ${_svnmod}-build
	cd ${_gitname}-build
	msg2 "Running make install" 
	make DESTDIR=${pkgdir} install

	# Replace FEH.py with FEH.sh (and thus remove external python dependency)
	msg2 "Replace FEH.py with FEH.sh (and thus remove external python dependency)"
	install -Dm755 ${srcdir}/FEH.sh \
		${pkgdir}${_prefix}/share/xbmc/FEH.sh
	sed -i -e 's/^python \(.*\)FEH.py \(.*\)$/\1FEH.sh \2/' \
		${pkgdir}${_prefix}/bin/xbmc

	# Tools
	msg2 "Tools"
	install -Dm755 ${srcdir}/${_gitname}-build/tools/TexturePacker/TexturePacker \
		${pkgdir}${_prefix}/lib/xbmc/

	# Licenses
	msg2 "Copy licenses"
	install -dm755 ${pkgdir}${_prefix}/share/licenses/${pkgname}
	for licensef in LICENSE.GPL copying.txt; do
		mv ${pkgdir}${_prefix}/share/doc/xbmc/${licensef} \
			${pkgdir}${_prefix}/share/licenses/${pkgname}
	done

	#cleanup some stuff
	msg2 "cleanup unneeded files"
	rm -rf ${pkgdir}/usr/share/xsessions
	rm -f ${pkgdir}/usr/share/xbmc/FEH.py
	# its not very usefull, and broken at the moment
	rm -f ${pkgdir}/usr/bin/xbmc-standalone
	# didnt we built --disable-xrandr ?
	rm -f ${pkgdir}/usr/lib/xbmc/xbmc-xrandr

	git show | grep -m 1 commit | sed 's/commit //' > ${startdir}/.githash_${CARCH}
}
